openapi: 3.0.3
info:
  title: Health AI Consultant API
  description: |
    A professional RAG-powered health consultation API using Flask, Ollama, and vector search.
    This API provides endpoints for health-related chat interactions and document management.
  version: 0.1.0
  contact:
    name: Health AI Consultant Team
servers:
  - url: http://localhost:5000
    description: Local development server
tags:
  - name: Health
    description: Health check endpoint
  - name: Chat
    description: Chat interaction endpoints
  - name: Documents
    description: Document management endpoints
paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Verify that the API is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: healthy
                version: 0.1.0
                service: Health AI Consultant API
  /api/chat:
    post:
      tags:
        - Chat
      summary: Chat with the health AI assistant
      description: |
        Send a health-related question to the AI assistant and receive a response.
        The response includes an answer, citations to relevant sources, and a confidence score.
      operationId: chatWithAI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              basic:
                summary: Basic chat request
                value:
                  question: What are the benefits of regular exercise?
                  conversation_id: test_conversation
                  stream: false
              streaming:
                summary: Streaming chat request
                value:
                  question: What are the benefits of regular exercise?
                  conversation_id: test_conversation
                  stream: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              example:
                answer: Regular exercise offers numerous health benefits, including improved cardiovascular health, reduced risk of chronic diseases, better weight management, enhanced mental health, and increased energy levels.
                citations:
                  - Health Guidelines, Topic: exercise, p. 1
                confidence: 0.85
                conversation_id: test_conversation
            text/event-stream:
              schema:
                type: string
                description: Stream of server-sent events for streaming responses
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: INVALID_REQUEST
                  message: Missing required field 'question'
                  details: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: OLLAMA_GENERATION_ERROR
                  message: An error occurred while generating a response from Ollama.
                  details: Connection refused
  /api/documents/upload:
    post:
      tags:
        - Documents
      summary: Upload a document
      description: |
        Upload a document (PDF, TXT, DOCX) to be processed and stored in the vector database.
        The document will be chunked, embedded, and made available for retrieval during chat.
      operationId: uploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload
              required:
                - file
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
              example:
                success: true
                document_id: 12345678-1234-5678-1234-567812345678
                filename: document.pdf
                metadata:
                  title: document.pdf
                  author: Unknown
                  page_count: 5
                  file_type: PDF
                  processed_at: '2023-07-10T21:30:45.123456'
                  chunk_count: 12
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: INVALID_REQUEST
                  message: No file selected
                  details: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: DOCUMENT_PROCESSING_ERROR
                  message: An error occurred while processing the document.
                  details: Failed to extract text from PDF
  /api/documents/:
    get:
      tags:
        - Documents
      summary: List all documents
      description: Get a list of all documents that have been uploaded and processed
      operationId: listDocuments
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
              example:
                documents:
                  - id: 12345678-1234-5678-1234-567812345678
                    filename: document1.pdf
                    title: Health Guidelines
                    author: John Doe
                    page_count: 5
                    file_type: PDF
                    processed_at: '2023-07-10T21:30:45.123456'
                    chunk_count: 12
                  - id: 87654321-8765-4321-8765-432187654321
                    filename: document2.pdf
                    title: Nutrition Handbook
                    author: Jane Smith
                    page_count: 10
                    file_type: PDF
                    processed_at: '2023-07-10T22:15:30.654321'
                    chunk_count: 25
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Get document details
      description: Get details about a specific document
      operationId: getDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the document to retrieve
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadata'
              example:
                id: 12345678-1234-5678-1234-567812345678
                filename: document1.pdf
                title: Health Guidelines
                author: John Doe
                page_count: 5
                file_type: PDF
                processed_at: '2023-07-10T21:30:45.123456'
                chunk_count: 12
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: INVALID_REQUEST
                  message: Document with ID 12345678-1234-5678-1234-567812345678 not found
                  details: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Documents
      summary: Delete a document
      description: Delete a document and all its chunks from the system
      operationId: deleteDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the document to delete
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeleteResponse'
              example:
                success: true
                document_id: 12345678-1234-5678-1234-567812345678
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: INVALID_REQUEST
                  message: Document with ID 12345678-1234-5678-1234-567812345678 not found
                  details: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          description: Health status of the API
          example: healthy
        version:
          type: string
          description: API version
          example: 0.1.0
        service:
          type: string
          description: Name of the service
          example: Health AI Consultant API
      required:
        - status
        - version
        - service
    ChatRequest:
      type: object
      properties:
        question:
          type: string
          description: The health-related question to ask
          example: What are the benefits of regular exercise?
        conversation_id:
          type: string
          description: ID of the conversation for context tracking
          example: test_conversation
        stream:
          type: boolean
          description: Whether to stream the response or return it all at once
          default: false
      required:
        - question
    ChatResponse:
      type: object
      properties:
        answer:
          type: string
          description: The AI-generated answer to the question
        citations:
          type: array
          description: List of citations for sources used in the answer
          items:
            type: string
        confidence:
          type: number
          format: float
          description: Confidence score for the answer (0-1)
          minimum: 0
          maximum: 1
        conversation_id:
          type: string
          description: ID of the conversation
      required:
        - answer
        - citations
        - confidence
        - conversation_id
    DocumentUploadResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the upload was successful
        document_id:
          type: string
          description: Unique ID of the uploaded document
        filename:
          type: string
          description: Original filename of the document
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
      required:
        - success
        - document_id
        - filename
        - metadata
    DocumentListResponse:
      type: object
      properties:
        documents:
          type: array
          description: List of documents
          items:
            $ref: '#/components/schemas/DocumentMetadata'
      required:
        - documents
    DocumentMetadata:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the document
        filename:
          type: string
          description: Original filename of the document
        title:
          type: string
          description: Title of the document
        author:
          type: string
          description: Author of the document
        page_count:
          type: integer
          description: Number of pages in the document
        file_type:
          type: string
          description: Type of the document (PDF, TXT, DOCX)
        processed_at:
          type: string
          format: date-time
          description: When the document was processed
        chunk_count:
          type: integer
          description: Number of chunks the document was split into
      required:
        - id
        - filename
        - file_type
        - processed_at
    DocumentDeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        document_id:
          type: string
          description: ID of the deleted document
      required:
        - success
        - document_id
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              enum:
                - INVALID_REQUEST
                - OLLAMA_CONNECTION_ERROR
                - OLLAMA_GENERATION_ERROR
                - VECTOR_DB_ERROR
                - DOCUMENT_PROCESSING_ERROR
                - INTERNAL_SERVER_ERROR
            message:
              type: string
              description: Human-readable error message
            details:
              type: string
              description: Additional error details
          required:
            - code
            - message
      required:
        - error
